package com.seller.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class SellerJDBCDAO implements SellerDAOinterface {

	private static final String INSERT_STMT = "INSERT INTO Seller ( `account_id`, `seller_certification`,`seller_name`, `seller_master_name`, `seller_phone`, `seller_taxnumber`, `seller_company`, `seller_address`) VALUES ('?', '?', '?', '?', '?', '?', '?', '?')";
	private static final String UPDATE_STMT = "UPDATE Seller SET  seller_certification  = ?, seller_name = ?, seller_master_name = ?, seller_phone = ? , seller_taxnumber = ? , seller_company = ?, seller_address = ? WHERE seller_id = ?";
	private static final String DELETE_STMT = "DELETE FROM Seller WHERE seller_id = ?";
	private static final String FIND_BY_PK = "SELECT * FROM Seller WHERE seller_id = ?";
	private static final String GET_ALL = "SELECT * FROM Seller";

	private static String driver = "com.mysql.cj.jdbc.Driver";
	private static String url = "jdbc:mysql://localhost:3306/JustEat?serverTimezone=Asia/Taipei"
			+ "&rewriteBatchedStatements=true";
	private static String userid = "DBAdmin";
	private static String passwd = "justeat";

	static {
		try {
			Class.forName(driver);
		} catch (ClassNotFoundException ce) {
			ce.printStackTrace();
		}
	}

	@Override
	public void add(SellerVO sellerVO) {
		Connection con = null;
		PreparedStatement pstmt = null;

		String[] autoGeneratedCol = { "OrderProductItem_id" };
		ResultSet rs = null;
		try {

			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(INSERT_STMT, autoGeneratedCol);
			pstmt.setInt(1, sellerVO.getAccountID());
			pstmt.setBytes(2, sellerVO.getSellerCertification());
			pstmt.setString(3, sellerVO.getSellerName());
			pstmt.setString(4, sellerVO.getSellerMasterName());
			pstmt.setString(5, sellerVO.getSellerPhone());
			pstmt.setString(6, sellerVO.getSellerTaxnumber());
			pstmt.setString(7, sellerVO.getSellerCompany());
			pstmt.setString(8, sellerVO.getSellerAddress());

//			pstmt.setInt(1, sellerVO.getEmpno());
//			pstmt.setString(2, sellerVO.getEname());
//			pstmt.setString(3, sellerVO.getJob());
//			pstmt.setDate(4, sellerVO.getHiredate());
//			pstmt.setDouble(5, sellerVO.getSal());
//			pstmt.setDouble(6, sellerVO.getComm());
//			pstmt.setInt(7, sellerVO.getDeptno());

			pstmt.executeUpdate();

			// Handle any driver errors
		} catch (SQLException se) {
			se.printStackTrace();
			// Clean up JDBC resources
		} finally {
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}

	}

	@Override
	public void update(SellerVO sellerVO) {
		Connection con = null;
		PreparedStatement pstmt = null;

		try {
//			private static final String UPDATE_STMT = "UPDATE Seller SET  seller_certification  = ?, seller_name = ?, seller_master_name = ?, seller_phone = ? , seller_taxnumber = ? , seller_company = ?, seller_address = ? WHERE seller_id = ?";

			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(UPDATE_STMT);

			pstmt.setBytes(1, sellerVO.getSellerCertification());
			pstmt.setString(2, sellerVO.getSellerName());
			pstmt.setString(3, sellerVO.getSellerMasterName());
			pstmt.setString(4, sellerVO.getSellerPhone());
			pstmt.setString(5, sellerVO.getSellerTaxnumber());
			pstmt.setString(6, sellerVO.getSellerCompany());
			pstmt.setString(7, sellerVO.getSellerAddress());
			pstmt.setInt(8, sellerVO.getSellerID());

//			pstmt.setDate(3, SellerVO.getHiredate());
//			pstmt.setDouble(4, SellerVO.getSal());
//			pstmt.setDouble(5, SellerVO.getComm());
//			pstmt.setInt(6, SellerVO.getDeptno());
//			pstmt.setInt(7, SellerVO.getEmpno());

			pstmt.executeUpdate();

			// Handle any driver errors
		} catch (SQLException se) {
			se.printStackTrace();
			// Clean up JDBC resources
		} finally {
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}

	}

	@Override
	public void delete(int sellerID) {
		Connection con = null;
		PreparedStatement pstmt = null;

		try {

			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(DELETE_STMT);

			pstmt.setInt(1, sellerID);

			pstmt.executeUpdate();

			// Handle any driver errors
		} catch (SQLException se) {
			se.printStackTrace();
			// Clean up JDBC resources
		} finally {
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}

	}

	@Override
	public SellerVO findByPK(int sellerID) {
		SellerVO emp = null;
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {

			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(FIND_BY_PK);
			pstmt.setInt(1, sellerID);
			rs = pstmt.executeQuery();

			while (rs.next()) {
				emp = new SellerVO();
				emp.setSellerID(rs.getInt("seller_id"));
				emp.setAccountID(rs.getInt("account_id"));
				emp.setSellerCertification(rs.getBytes("seller_certification"));
				emp.setSellerName(rs.getString("seller_name"));
				emp.setSellerMasterName(rs.getString("seller_master_name"));
				emp.setSellerPhone(rs.getString("seller_phone"));
				emp.setSellerTaxnumber(rs.getString("seller_taxnumber"));
				emp.setSellerCompany(rs.getString("seller_company"));
				emp.setSellerAddress(rs.getString("seller_address"));

//				emp.setEmpno(rs.getInt("EMPNO"));
//				emp.setEname(rs.getString("ENAME"));
//				emp.setJob(rs.getString("JOB"));
//				emp.setHiredate(rs.getDate("HIREDATE"));
//				emp.setSal(rs.getDouble("SAL"));
//				emp.setComm(rs.getDouble("COMM"));
//				emp.setDeptno(rs.getInt("DEPTNO"));
			}

		} catch (SQLException se) {
			se.printStackTrace();
			// Clean up JDBC resources
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}

		return emp;
	}

	@Override
	public List<SellerVO> getAll() {
		List<SellerVO> empList = new ArrayList<>();
		SellerVO emp = null;
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {

			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(GET_ALL);
			rs = pstmt.executeQuery();

			while (rs.next()) {
				emp = new SellerVO();

				emp.setSellerID(rs.getInt("seller_id"));
				emp.setAccountID(rs.getInt("account_id"));
				emp.setSellerCertification(rs.getBytes("seller_certification"));
				emp.setSellerName(rs.getString("seller_name"));
				emp.setSellerMasterName(rs.getString("seller_master_name"));
				emp.setSellerPhone(rs.getString("seller_phone"));
				emp.setSellerTaxnumber(rs.getString("seller_taxnumber"));
				emp.setSellerCompany(rs.getString("seller_company"));
				emp.setSellerAddress(rs.getString("seller_address"));

//				emp.setEmpno(rs.getInt("sellerID"));
//				emp.setEname(rs.getString("sellerCompany"));
//				emp.setJob(rs.getString("JOB"));
//				emp.setHiredate(rs.getDate("HIREDATE"));
//				emp.setSal(rs.getDouble("SAL"));
//				emp.setComm(rs.getDouble("COMM"));
//				emp.setDeptno(rs.getInt("DEPTNO"));

				empList.add(emp);
			}

		} catch (SQLException se) {
			se.printStackTrace();
			// Clean up JDBC resources
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return empList;
	}

}
