package com.orderproductitem.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class OrderProductItemJDBCDAO implements OrderProductItemDAOinterface {
//	CREATE TABLE `OrderProductItem` (
//			  `OrderProductItem_id` int NOT NULL AUTO_INCREMENT COMMENT '�q����Ӭy����',
//			  `product_id` int DEFAULT NULL COMMENT '�ӫ~�y����',
//			  `order_id` int DEFAULT NULL COMMENT '�q��y����',
//			  `product_buy_amount` int NOT NULL COMMENT '�ӫ~�ʶR�ƶq',
//			  `order_cost` decimal(10,0) NOT NULL COMMENT '���ت��B',
//			  `order_discount` decimal(3,2) NOT NULL DEFAULT '1.00' COMMENT '�ӫ~�馩',
	private static final String INSERT_STMT = "INSERT INTO OrderProductItem(product_id, order_id,product_buy_amount , order_cost,order_discount ) VALUES (?, ?, ?, ?, ?)";
	private static final String UPDATE_STMT = "UPDATE OrderProductItem SET  product_buy_amount = ?, order_cost = ?, order_discount = ? WHERE OrderProductItem_id = ?";
	private static final String DELETE_STMT = "DELETE FROM OrderProductItem WHERE OrderProductItem_id = ?";
	private static final String FIND_BY_PK = "SELECT * FROM OrderProductItem WHERE OrderProductItem_id = ?";
	private static final String GET_ALL = "SELECT * FROM OrderProductItem";

	private static String driver = "com.mysql.cj.jdbc.Driver";
	private static String url = "jdbc:mysql://localhost:3306/JustEat?serverTimezone=Asia/Taipei"
			+ "&rewriteBatchedStatements=true";
	private static String userid = "DBAdmin";
	private static String passwd = "justeat";

	static {
		try {
			Class.forName(driver);
		} catch (ClassNotFoundException ce) {
			ce.printStackTrace();
		}
	}

	@Override
	public void add(OrderProductItemVO orderProductItemVO) {
		Connection con = null;
		PreparedStatement pstmt = null;

		String[] autoGeneratedCol = { "OrderProductItem_id" };
		ResultSet rs = null;
		int autoGeneratedColKey = 0;
		try {

			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(INSERT_STMT);
//			CREATE TABLE `OrderProductItem` (
//					  `OrderProductItem_id` int NOT NULL AUTO_INCREMENT COMMENT '�q����Ӭy����',
//					  `product_id` int DEFAULT NULL COMMENT '�ӫ~�y����',
//					  `order_id` int DEFAULT NULL COMMENT '�q��y����',
//					  `product_buy_amount` int NOT NULL COMMENT '�ӫ~�ʶR�ƶq',
//					  `order_cost` decimal(10,0) NOT NULL COMMENT '���ت��B',
//					  `order_discount` decimal(3,2) NOT NULL DEFAULT '1.00' COMMENT '�ӫ~�馩',
//					  PRIMARY KEY (`OrderProductItem_id`),

			pstmt.setInt(1, orderProductItemVO.getProductID());
			pstmt.setInt(2, orderProductItemVO.getOrderID());
			pstmt.setInt(3, orderProductItemVO.getProductBuyAmount());
			pstmt.setBigDecimal(4, orderProductItemVO.getOrderCost());
			pstmt.setBigDecimal(5, orderProductItemVO.getOrderDiscount());

			pstmt.executeUpdate();
			rs = pstmt.getGeneratedKeys();

			if (rs.next()) {
				autoGeneratedColKey = rs.getInt(1);// ?
			}

			// Handle any driver errors
		} catch (SQLException se) {
			se.printStackTrace();
			// Clean up JDBC resources
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}

		}

		// �ڪ���copy
		// TODO Auto-generated method stub

	}

	@Override
	public void update(OrderProductItemVO orderProductItemVO) {
//		private static final String UPDATE_STMT = "UPDATE OrderProductItem SET  product_buy_amount = ?, order_cost = ?, order_discount = ? WHERE OrderProductItem_id = ?";
		Connection con = null;
		PreparedStatement pstmt = null;
		try {

			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(UPDATE_STMT);
			pstmt.setInt(1, orderProductItemVO.getProductBuyAmount());
			pstmt.setBigDecimal(2, orderProductItemVO.getOrderCost());
			pstmt.setBigDecimal(3, orderProductItemVO.getOrderDiscount());

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} // ?
		finally {
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}

		}
	}

	@Override
	public void delete(int orderProductItemID) {
		// TODO Auto-generated method stub
//		private static final String DELETE_STMT = "DELETE FROM OrderProductItem WHERE OrderProductItem_id = ?";
		Connection con = null;
		PreparedStatement pstmt = null;

		try {

			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(DELETE_STMT);
			pstmt.setInt(1, orderProductItemID);
			pstmt.executeUpdate();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
	}

	@Override
	public OrderProductItemVO findByPK(int orderProductItemID) {
		OrderProductItemVO emp = null;
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {

			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(FIND_BY_PK);
			pstmt.setInt(1, orderProductItemID);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				emp = new OrderProductItemVO();
//				CREATE TABLE `OrderProductItem` (
//						  `` int NOT NULL AUTO_INCREMENT COMMENT '�q����Ӭy����',
//						  `` int DEFAULT NULL COMMENT '�ӫ~�y����',
//						  `` int DEFAULT NULL COMMENT '�q��y����',
//						  `product_buy_amount` int NOT NULL COMMENT '�ӫ~�ʶR�ƶq',
//						  `order_cost` decimal(10,0) NOT NULL COMMENT '���ت��B',
//						  `order_discount` decimal(3,2) NOT NULL DEFAULT '1.00' COMMENT '�ӫ~�馩',
				emp.setOrderProductItemID(rs.getInt("OrderProductItem_id"));
				emp.setProductID(rs.getInt("productID"));
				emp.setOrderID(rs.getInt("order_id"));
				emp.setProductBuyAmount(rs.getInt("productBuyAmount"));
				emp.setOrderCost(rs.getBigDecimal("orderCost"));
				emp.setOrderDiscount(rs.getBigDecimal("orderDiscount"));

			}

		} catch (SQLException se) {
			se.printStackTrace();
			// Clean up JDBC resources
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}

		return emp;
	}

	@Override
	public List<OrderProductItemVO> getAll() {
		List<OrderProductItemVO> empList = new ArrayList<>();
		OrderProductItemVO emp = null;
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {

			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(GET_ALL);
			rs = pstmt.executeQuery();
//�ӧۥJ
			while (rs.next()) {
				emp = new OrderProductItemVO();
				emp.setOrderProductItemID(rs.getInt("OrderProductItem_id"));
				emp.setProductID(rs.getInt("productID"));
				emp.setOrderID(rs.getInt("order_id"));
				emp.setProductBuyAmount(rs.getInt("productBuyAmount"));
				emp.setOrderCost(rs.getBigDecimal("orderCost"));
				emp.setOrderDiscount(rs.getBigDecimal("orderDiscount"));

				empList.add(emp);
			}

		} catch (SQLException se) {
			se.printStackTrace();
			// Clean up JDBC resources
		} finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return empList;
	}

}
