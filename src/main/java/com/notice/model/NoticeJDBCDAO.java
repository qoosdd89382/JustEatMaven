package com.notice.model;

import java.util.*;

import com.announce.model.AnnounceVO;
import com.visit.model.VisitJDBCDAO;
import com.visit.model.VisitVO;

import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class NoticeJDBCDAO implements NoticeDAOInterface {

	private static String driver = "com.mysql.cj.jdbc.Driver";
	private static String url = "jdbc:mysql://localhost:3306/JustEat?serverTimezone=Asia/Taipei";
	private static String userid = "DBAdmin";
	private static String password = "justeat";
	
	private static final String Insert_Stmt = "Insert into Notice "
			+ "(account_id,notice_type,notice_text,notice_time,notice_state)"
			+ "Values(?,?,?,?,?)";
	private static final String UPDATE_STATE = "UPDATE Notice SET notice_state = 1 where notice_id = ?";
	private static final String Update_Stmt = "Update Notice set "
			+ "account_id=?,notice_type=?,notice_text=?,notice_time=?,notice_state=?"
			+ "Where notice_id=?";
	private static final String Delete_Stmt = 
			"Delete From Notice Where notice_id=?";
	private static final String Select_Key_Stmt = 
			"Select * From JustEat.Notice Where notice_id=?";
	private static final String Select_All_Stmt = 
			"Select * From JustEat.Notice";
	
	//透過session裡面的accountmail找他相關的通知
	private static final String Select_Account_Notice_By_AccountMail = 
			"select * From JustEat.Notice where "
			+ "account_id in (Select account_id From JustEat.AccountInfo Where "
			+ "account_mail=?)";

	
	
	static {
		try {
			Class.forName(driver);
		} catch (ClassNotFoundException e) {
			e.printStackTrace(System.err);
		}
	}

	@Override
	public int insert(NoticeVO noticeVO) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs =null;
		
		String[] autoGeneratedCol = {"notice_id"};
		int autoGeneratedkey = 0;
		try {
			con = DriverManager.getConnection(url,userid,password);
			pstmt = con.prepareStatement(Insert_Stmt,autoGeneratedCol);
			
			pstmt.setInt(1,noticeVO.getAccountID());
			pstmt.setString(2,noticeVO.getNoticeType());
			pstmt.setString(3,noticeVO.getNoticeText());
			pstmt.setTimestamp(4,noticeVO.getNoticeTime());
			pstmt.setInt(5,noticeVO.getNoticeState());
			
			pstmt.executeUpdate();
			
			rs = pstmt.getGeneratedKeys();
			if(rs.next()) {
				autoGeneratedkey = rs.getInt(1);
				System.out.println("Notice insert completed!notice_id="+autoGeneratedkey);
			}else {
				System.out.println("Notice insert failed!");
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			if (rs != null) {
				try {
					rs.close();
				}catch(Exception e) {
					e.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {					
					pstmt.close();
				}catch (Exception e){
					e.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				}catch(Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return autoGeneratedkey;
	}

	@Override
	public void update(NoticeVO noticeVO) {
		Connection con = null;
		PreparedStatement pstmt = null;
		
		try {
			con = DriverManager.getConnection(url,userid,password);
			pstmt = con.prepareStatement(Update_Stmt);
			
			pstmt.setInt(1,noticeVO.getAccountID());
			pstmt.setString(2,noticeVO.getNoticeType());
			pstmt.setString(3,noticeVO.getNoticeText());
			pstmt.setTimestamp(4,noticeVO.getNoticeTime());
			pstmt.setInt(5,noticeVO.getNoticeState());
			
			pstmt.setInt(6,noticeVO.getNoticeID());
			
			pstmt.executeUpdate();
			
		}catch (Exception e){
			e.printStackTrace(System.err);
		}finally {
			if (pstmt != null) {
				try {
					pstmt.close();
				}catch(Exception e) {
					e.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				}catch(Exception e) {
					e.printStackTrace(System.err);;
				}
			}
		}
	}

	@Override
	public void updateState(int noticeID) {
		Connection con = null;
		PreparedStatement pstmt = null;
		
		try {
			con = DriverManager.getConnection(url,userid,password);
			pstmt = con.prepareStatement(Update_Stmt);
			
			pstmt.setInt(1, noticeID);
			
			pstmt.executeUpdate();
			
		}catch (Exception e){
			e.printStackTrace(System.err);
		}finally {
			if (pstmt != null) {
				try {
					pstmt.close();
				}catch(Exception e) {
					e.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				}catch(Exception e) {
					e.printStackTrace(System.err);;
				}
			}
		}
	}
	
	@Override
	public void delete(Integer notice_id) {
		Connection con = null;
		PreparedStatement pstmt = null;
		
		try {
			con = DriverManager.getConnection(url, userid, password);
			pstmt = con.prepareStatement(Delete_Stmt);
			pstmt.setInt(1,notice_id);
			pstmt.executeUpdate();

			System.out.println("Notice delete completed!");
		}catch(Exception e){
			e.printStackTrace();
		}finally {
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		
	}

	@Override
	public NoticeVO findByPrimaryKey(Integer notice_id) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		NoticeVO noticeVO = null;
		
		try {
			con = DriverManager.getConnection(url, userid, password);
			pstmt = con.prepareStatement(Select_Key_Stmt);
			
			pstmt.setInt(1,notice_id);
			rs = pstmt.executeQuery();

			while (rs.next()) {
				noticeVO = new NoticeVO();
				noticeVO.setNoticeID(rs.getInt("notice_id"));
				noticeVO.setAccountID(rs.getInt("account_id"));
				noticeVO.setNoticeType(rs.getString("notice_type"));
				noticeVO.setNoticeText(rs.getString("notice_text"));
				noticeVO.setNoticeTime(rs.getTimestamp("notice_time"));
				noticeVO.setNoticeState(rs.getInt("notice_state"));			
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) {
				try {
					rs.close();					
				}catch(Exception e) {
					e.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return noticeVO;
	}

	@Override
	public List<NoticeVO> getAll() {
		List<NoticeVO> list = new ArrayList<NoticeVO>();
		NoticeVO noticeVO = null;
		
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		
		try {
			Class.forName(driver);
			con = DriverManager.getConnection(url, userid, password);
			pstmt = con.prepareStatement(Select_All_Stmt);
			rs = pstmt.executeQuery();
			
			while (rs.next()) {
				noticeVO = new NoticeVO();
				noticeVO.setNoticeID(rs.getInt("notice_id"));
				noticeVO.setAccountID(rs.getInt("account_id"));
				noticeVO.setNoticeType(rs.getString("notice_type"));
				noticeVO.setNoticeText(rs.getString("notice_text"));
				noticeVO.setNoticeTime(rs.getTimestamp("notice_time"));
				noticeVO.setNoticeState(rs.getInt("notice_state"));
				list.add(noticeVO);
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return list;
	}
	//查看通知內容
	public List<NoticeVO> getAccountNoticeByAccountMail(String accountMail){
		List<NoticeVO> list = new ArrayList<NoticeVO>();
		NoticeVO noticeVO = null;
		
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			Class.forName(driver);
			con = DriverManager.getConnection(url, userid, password);
			pstmt = con.prepareStatement(Select_Account_Notice_By_AccountMail);
			pstmt.setString(1,accountMail);
			rs = pstmt.executeQuery();
			
			while (rs.next()) {
				noticeVO = new NoticeVO();
//				noticeVO.setNoticeID(rs.getInt("notice_id"));
//				noticeVO.setAccountID(rs.getInt("account_id"));
				noticeVO.setNoticeType(rs.getString("notice_type"));
				noticeVO.setNoticeText(rs.getString("notice_text"));
				noticeVO.setNoticeTime(rs.getTimestamp("notice_time"));
//				noticeVO.setNoticeState(rs.getInt("notice_state"));
				list.add(noticeVO);
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return list;
	}
	
	
	
	
	
	public static void main(String[] args) {
		String date = "2021-02-03 14:00";
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
		LocalDateTime localDateTime = LocalDateTime.parse(date,formatter);
		Timestamp timestampdate = Timestamp.valueOf(localDateTime);
		
		NoticeJDBCDAO noticeJDBCDAO = new NoticeJDBCDAO();
		
		NoticeVO noticeVO = new NoticeVO();
		//新增 OK 要先在會員新增
//		noticeVO.setAccountID(100001);
//		noticeVO.setNoticeType(1);
//		noticeVO.setNoticeText("吃我的通知");
//		noticeVO.setNoticeTime(timestampdate);
//		noticeVO.setNoticeState(1);
//		noticeJDBCDAO.insert(noticeVO);
		//刪除 OK
//		noticeJDBCDAO.delete(710001);

		//通知不需要修改，刪掉重發就好
//		noticeVO.setAccountID(100001);
//		noticeVO.setnoticeTime(timestampdate);
//		noticeVO.setnoticeID(900004);
//		noticeJDBCDAO.update(noticeVO);
		
		//查詢 OK
//		noticeVO = noticeJDBCDAO.findByPrimaryKey(710002);
//		System.out.println(noticeVO.getAccountID()+",");
//		System.out.println(noticeVO.getNoticeType()+",");
//		System.out.println(noticeVO.getNoticeText()+",");
//		System.out.println(noticeVO.getNoticeTime()+",");
//		System.out.println(noticeVO.getNoticeState()+",");
//		System.out.println("search complete!");

		//查詢全部 OK
//		List<NoticeVO> noticeVO_list = noticeJDBCDAO.getAll();
//		for (NoticeVO e:noticeVO_list) {
//			System.out.println(e.getAccountID()+",");
//			System.out.println(e.getNoticeType()+",");
//			System.out.println(e.getNoticeText()+",");
//			System.out.println(e.getNoticeTime()+",");
//			System.out.println(e.getNoticeState()+",");
//		}
		
	}

	@Override
	public List<NoticeVO> getAllByAccountID(int accountID) {
		List<NoticeVO> list = new ArrayList<NoticeVO>();
		NoticeVO noticeVO = null;
		
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			Class.forName(driver);
			con = DriverManager.getConnection(url, userid, password);
			pstmt = con.prepareStatement(Select_All_Stmt + " WHERE account_id = ?");
			
			pstmt.setInt(1, accountID);
			
			rs = pstmt.executeQuery();
			
			while (rs.next()) {
				noticeVO = new NoticeVO();
				noticeVO.setNoticeID(rs.getInt("notice_id"));
				noticeVO.setAccountID(rs.getInt("account_id"));
				noticeVO.setNoticeType(rs.getString("notice_type"));
				noticeVO.setNoticeText(rs.getString("notice_text"));
				noticeVO.setNoticeTime(rs.getTimestamp("notice_time"));
				noticeVO.setNoticeState(rs.getInt("notice_state"));
				list.add(noticeVO);
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return list;
	}
}
