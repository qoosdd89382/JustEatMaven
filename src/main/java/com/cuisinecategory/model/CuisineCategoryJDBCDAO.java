package com.cuisinecategory.model;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

//import com.cuisinecategory.model.CuisineCategoryVO;

public class CuisineCategoryJDBCDAO implements CuisineCategoryDAOInterface {
	private static String driver = "com.mysql.cj.jdbc.Driver";
	private static String url = "jdbc:mysql://localhost:3306/JustEat?serverTimezone=Asia/Taipei" + "&rewriteBatchedStatements=true";
	private static String userid = "DBAdmin";
	private static String passwd = "justeat";

//	private static DataSource ds = null;
//	static { // 連線池和 DataSource 只跑一次
//		try {
//			Context ctx = new InitialContext();
//			ds = (DataSource) ctx.lookup("java:comp/env/jdbc/JustEat"); // 記得在 Server 的 context.xml 註冊
//		} catch (NamingException e) {
//			e.printStackTrace();
//		}
//	}

	static {
		try {
			Class.forName(driver);
		} catch (ClassNotFoundException ce) {
			ce.printStackTrace();
		}
	}
	
	private static final String INSERT = "INSERT INTO CuisineCategory(cuisinecategory_name) VALUES(?)";
	private static final String UPDATE = "UPDATE CuisineCategory SET cuisinecategory_name = ? WHERE cuisinecategory_id = ?";
	private static final String DELETE = "DELETE FROM CuisineCategory WHERE cuisinecategory_id = ?";
	// 順序寫死
	private static final String SELECT_ALL = "SELECT * FROM CuisineCategory ORDER BY cuisinecategory_id DESC";
	private static final String SELECT_ONE_BY_ID = "SELECT * FROM CuisineCategory WHERE cuisinecategory_id = ? ORDER BY cuisinecategory_id DESC"; // SELECT * 擇不能用欄位名set ?
	private static final String SELECT_ONE_BY_NAME = "SELECT * FROM CuisineCategory WHERE cuisinecategory_name = ?";
	
	@Override
	public int insert(CuisineCategoryVO cuisineCategory) {
		Connection con = null; // 區域變數就好，用完馬上還
		PreparedStatement pstmt = null;
		String[] autoGeneratedCol = { "cuisineCategory_id" };
		ResultSet rs = null;
		int autoGeneratedKey = 0;

		try {
			con = DriverManager.getConnection(url, userid, passwd);

//			con = ds.getConnection();			
			pstmt = con.prepareStatement(INSERT, autoGeneratedCol); // 其實可以不要綁自增主鍵值，但綁了才有辦法透過 Java method 取得；
			// 只有一欄的情況下 = Statement.RETURN_GENERATED_KEYS
			pstmt.setString(1, cuisineCategory.getCuisineCategoryName());

//			pstmt.executeUpdate("set auto_increment_offset = 250001;");		// 這邊開始兩行會跟 rs = pstmt.getGeneratedKeys 衝突
//			pstmt.executeUpdate("set auto_increment_increment = 1;");

			pstmt.executeUpdate();

			rs = pstmt.getGeneratedKeys(); // 透過 Java method 取得
			if (rs.next()) {
				autoGeneratedKey = rs.getInt(1);
//				System.out.println("新增料理分類流水號為" + autoGeneratedKey);
			}
//			else {
//				System.out.println("NO KEYS WERE GENERATED.");
//			}

		} catch (SQLException se) {
			se.printStackTrace();
		} finally {

			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}

		}
		return autoGeneratedKey;
	}

	@Override
	public int update(CuisineCategoryVO cuisineCategory) {

		Connection con = null;
		PreparedStatement pstmt = null;
		int updateRow = 0;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(UPDATE);

			pstmt.setString(1, cuisineCategory.getCuisineCategoryName());
			pstmt.setInt(2, cuisineCategory.getCuisineCategoryID());
			
			updateRow = pstmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}

		}
		return updateRow;
	}

	@Override
	public int delete(int cuisineCategoryID) {
		Connection con = null;
		PreparedStatement pstmt = null;
		int deleteRow = 0;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(DELETE);

			pstmt.setInt(1, cuisineCategoryID);
			
			deleteRow = pstmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}

		}
		return deleteRow;
	}

	@Override
	public int delete(int[] cuisineCategoryIDs) {
		Connection con = null;
		PreparedStatement pstmt = null;
		int deleteRows = 0;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(DELETE);

			for (int cuisineCategoryID : cuisineCategoryIDs) {
				pstmt.setInt(1, cuisineCategoryID);
				pstmt.addBatch();
				deleteRows++;
			}

			pstmt.executeBatch();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}

		}
		return deleteRows;
	}

	@Override
	public List<CuisineCategoryVO> getAll() {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<CuisineCategoryVO> allCuisineCategory = null;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(SELECT_ALL);

			rs = pstmt.executeQuery();
			allCuisineCategory = new ArrayList<CuisineCategoryVO>();

			while (rs.next()) {
				CuisineCategoryVO cuisineCategory = new CuisineCategoryVO();
				cuisineCategory.setCuisineCategoryID(rs.getInt("CuisineCategory_id"));
				cuisineCategory.setCuisineCategoryName(rs.getString("CuisineCategory_name"));
				allCuisineCategory.add(cuisineCategory);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (rs != null)
				try {
					rs.close();
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}

		}
		return allCuisineCategory;
	}

	@Override
	public CuisineCategoryVO getOneByID(int cuisineCategoryID) {

		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		CuisineCategoryVO cuisineCategory = null;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(SELECT_ONE_BY_ID);

			pstmt.setInt(1, cuisineCategoryID);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				cuisineCategory = new CuisineCategoryVO();
				cuisineCategory.setCuisineCategoryID(rs.getInt("CuisineCategory_id"));
				cuisineCategory.setCuisineCategoryName(rs.getString("CuisineCategory_name"));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (rs != null)
				try {
					rs.close();
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}

		}
		return cuisineCategory;
	}

	@Override
	public boolean isExist(String cuisineCategoryName) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		boolean ExistStatus = false;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(SELECT_ONE_BY_NAME);

			pstmt.setString(1, cuisineCategoryName);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				ExistStatus = true;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (rs != null)
				try {
					rs.close();
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return ExistStatus;
	}
	
	// 測試用 main 方法
	public static void main(String args[]) {

		CuisineCategoryJDBCDAO cuisineCategoryDAO = new CuisineCategoryJDBCDAO();

		// 測試 insert 成功
		CuisineCategoryVO cuisineCategory1 = new CuisineCategoryVO();
		cuisineCategory1.setCuisineCategoryName("台式");
		cuisineCategoryDAO.insert(cuisineCategory1);

//		// 測試 update 成功
//		CuisineCategoryVO cuisineCategory2 = new CuisineCategoryVO();
//		cuisineCategory2.setCuisineCategoryID(250020);
//		cuisineCategory2.setCuisineCategoryName("美式");
//		cuisineCategoryDAO.update(cuisineCategory2);

//		// 測試單個 delete by id 成功
//		cuisineCategoryDAO.delete(250005);

//		// 測試多個 delete by ids 成功
//		int[] deleteID = { 250018, 250019 };
//		cuisineCategoryDAO.delete(deleteID);

//		// 測試 getAll 成功
//		List<CuisineCategoryVO> list = cuisineCategoryDAO.getAll();
//		for (CuisineCategoryVO item : list) {
//			System.out.println("編號：" + item.getCuisineCategoryID() + "\n分類名稱：" + item.getCuisineCategoryName() + "\n=====================");
//		}

//		// 測試 getOneByID 成功
//		CuisineCategoryVO cuisineCategoryVO = cuisineCategoryDAO.getOneByID(250001);
//		System.out.println("編號：" + cuisineCategoryVO.getCuisineCategoryID()
//				+ "\n分類名稱：" + cuisineCategoryVO.getCuisineCategoryName() + "\n=====================");

	}

}
