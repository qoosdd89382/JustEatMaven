package com.ingredient.model;

import java.sql.*;
import java.util.List;
import java.util.ArrayList;
import java.util.List;

public class IngredientJDBCDAO implements IngredientDAOInterface {
	private static String driver = "com.mysql.cj.jdbc.Driver";
	private static String url = "jdbc:mysql://localhost:3306/JustEat?serverTimezone=Asia/Taipei"
			+ "&rewriteBatchedStatements=true";
	private static String userid = "DBAdmin";
	private static String passwd = "justeat";

	static {
		try {
			Class.forName(driver);
		} catch (ClassNotFoundException ce) {
			ce.printStackTrace();
		}
	}

	private static final String INSERT = "INSERT INTO Ingredient(ingredient_name) VALUES(?)";
	private static final String SELECT_ONE_BY_ID = "SELECT * FROM Ingredient WHERE ingredient_id = ?";
	private static final String SELECT_ONE_BY_NAME = "SELECT * FROM Ingredient WHERE ingredient_name = ?";
	private static final String SELECT_ALL = "SELECT * FROM Ingredient ";
	private static final String UPDATE = "UPDATE Ingredient SET ingredient_name = ? WHERE ingredient_id = ?";
	private static final String UPDATE_SEARCH_COUNT = "UPDATE Ingredient SET ingredient_search_count = ? WHERE ingredient_id = ?";
	private static final String DELETE = "DELETE FROM Ingredient WHERE ingredient_id = ?";

	@Override
	public int insert(IngredientVO ingredient) {
		Connection con = null;
		PreparedStatement pstmt = null;
		String[] autoGeneratedCol = { "ingredient_id" };
		ResultSet rs = null;
		int autoGeneratedKey = 0;

		try {
			con = DriverManager.getConnection(url, userid, passwd);

			pstmt = con.prepareStatement(INSERT, autoGeneratedCol);
			pstmt.setString(1, ingredient.getIngredientName());

			pstmt.executeUpdate();
			rs = pstmt.getGeneratedKeys();
			if (rs.next()) {
				autoGeneratedKey = rs.getInt(1);
			}

		} catch (SQLException se) {
			throw new RuntimeException("A database error occured. "
					+ se.getMessage());
		} finally {

			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}

		}
		return autoGeneratedKey;
	}

	@Override
	public IngredientVO getOneByID(int ingredientID) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		IngredientVO ingredient = null;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(SELECT_ONE_BY_ID);

			pstmt.setInt(1, ingredientID);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				ingredient = new IngredientVO();
				ingredient.setIngredientID(rs.getInt("ingredient_id"));
				ingredient.setIngredientName(rs.getString("ingredient_name"));
				ingredient.setIngredientSearchCount(rs.getInt("ingredient_search_count"));
			}

		} catch (SQLException se) {
			throw new RuntimeException("A database error occured. "
					+ se.getMessage());
		} finally {

			if (rs != null)
				try {
					rs.close();
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return ingredient;
	}

	@Override
	public int update(IngredientVO ingredient) {

		Connection con = null;
		PreparedStatement pstmt = null;
		int updateRow = 0;

		try {
			con = DriverManager.getConnection(url, userid, passwd);

			// 再 set
			pstmt = con.prepareStatement(UPDATE);

			pstmt.setString(1, ingredient.getIngredientName());
			pstmt.setInt(2, ingredient.getIngredientID());
			updateRow = pstmt.executeUpdate();

		} catch (SQLException se) {
			throw new RuntimeException("A database error occured. "
					+ se.getMessage());
		} finally {

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}

		}
		return updateRow;
	}

	@Override
	public List<IngredientVO> getAll() {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<IngredientVO> allIngredient = new ArrayList<IngredientVO>();

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(SELECT_ALL + "ORDER BY ingredient_id DESC");

			rs = pstmt.executeQuery();
			while (rs.next()) {
				IngredientVO ingredient = new IngredientVO();
				ingredient.setIngredientID(rs.getInt("ingredient_id"));
				ingredient.setIngredientName(rs.getString("ingredient_name"));
				ingredient.setIngredientSearchCount(rs.getInt("ingredient_search_count"));
				allIngredient.add(ingredient);
			}

		} catch (SQLException se) {
			throw new RuntimeException("A database error occured. "
					+ se.getMessage());
		} finally {

			if (rs != null)
				try {
					rs.close();
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}

		return allIngredient;
	}

	@Override
	public int delete(int ingredientID) {
		Connection con = null;
		PreparedStatement pstmt = null;
		int deleteRow = 0;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(DELETE);

			pstmt.setInt(1, ingredientID);
			deleteRow = pstmt.executeUpdate();

		} catch (SQLException se) {
			throw new RuntimeException("A database error occured. "
					+ se.getMessage());
		} finally {

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}

		}
		return deleteRow;
	}

	@Override
	public int delete(int[] ingredientIDs) {
		Connection con = null;
		PreparedStatement pstmt = null;
		int deleteRows = 0;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(DELETE);

			for (int ingredientID : ingredientIDs) {
				pstmt.setInt(1, ingredientID);
				pstmt.addBatch();
				deleteRows++;
			}

			pstmt.executeBatch();

		} catch (SQLException se) {
			throw new RuntimeException("A database error occured. "
					+ se.getMessage());
		} finally {

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}

		}
		return deleteRows;
	}

	@Override
	public boolean isExist(String ingredientName) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		boolean ExistStatus = false;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(SELECT_ONE_BY_NAME);

			pstmt.setString(1, ingredientName);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				ExistStatus = true;
			}

		} catch (SQLException se) {
			throw new RuntimeException("A database error occured. "
					+ se.getMessage());
		} finally {

			if (rs != null)
				try {
					rs.close();
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return ExistStatus;
	}

	// 測試用
	public static void main(String args[]) {

		IngredientVO vo = new IngredientVO();
		IngredientJDBCDAO dao = new IngredientJDBCDAO();
		List<IngredientVO> list;

		// 測試 insert
		String name = "鴨脖子";
		vo.setIngredientName(name);
		if (dao.isExist(name)) {
			System.out.println("此食材名稱已存在");
		} else {
			int key = dao.insert(vo);
			if (key != 0) {
				System.out.println("流水號" + key + "新增成功");
			}
		}

//		// 測試 update
//		vo = dao.getOneByID(220003);
//		String newName = "鴨賞";
//		if (vo != null) {
//			System.out.println("該編號存在，繼續執行更新檢測");
//			if (!newName.equals(vo.getIngredientName())) {
//				if (dao.isExist(newName)) {
//					System.out.println("已有其他同名食材!");
//				} else {
//					vo.setIngredientName(newName);
//					System.out.println(dao.update(vo) + "筆資料更新成功");
//				}
//			} else {
//				System.out.println("你沒有改名");
//			}
//		} else {
//			System.out.println("(流水號錯誤)不做任何事，搭配修改按鈕onclick，不可能發生這種情況");
//		}
		
//		// 測試 get all 成功
//		list = dao.getAll();
//		for (IngredientVO one : list) {
//			System.out.println("編號：" + one.getIngredientID());
//			System.out.println("名稱：" + one.getIngredientName());
//			System.out.println("=============");
//		}

//		// 測試 delete one 成功
//		if (dao.delete(210005) > 0) {
//			System.out.println("刪除成功");
//		}

//		// 測試delete many 成功
//		int[] delNum = { 210004, 210003 }; 
//		int delRows = dao.delete(delNum);
//		if (delRows > 0) {
//			System.out.println("刪除成功");
//		}

	}

	@Override
	public List<IngredientVO> getAll(String sqlStatement) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<IngredientVO> allIngredient = new ArrayList<IngredientVO>();

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(SELECT_ALL + sqlStatement);

			rs = pstmt.executeQuery();
			while (rs.next()) {
				IngredientVO ingredient = new IngredientVO();
				ingredient.setIngredientID(rs.getInt("ingredient_id"));
				ingredient.setIngredientName(rs.getString("ingredient_name"));
				ingredient.setIngredientSearchCount(rs.getInt("ingredient_search_count"));
				allIngredient.add(ingredient);
			}

		} catch (SQLException se) {
			throw new RuntimeException("A database error occured. "
					+ se.getMessage());
		} finally {

			if (rs != null)
				try {
					rs.close();
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}

		return allIngredient;
	}

	@Override
	public int updateSearchCount(IngredientVO ingredient) {
		Connection con = null;
		PreparedStatement pstmt = null;
		int updateRow = 0;

		try {
			con = DriverManager.getConnection(url, userid, passwd);

			// 再 set
			pstmt = con.prepareStatement(UPDATE_SEARCH_COUNT);

			pstmt.setInt(1, ingredient.getIngredientSearchCount());
			pstmt.setInt(2, ingredient.getIngredientID());
			updateRow = pstmt.executeUpdate();

		} catch (SQLException se) {
			throw new RuntimeException("A database error occured. "
					+ se.getMessage());
		} finally {

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}

		}
		return updateRow;
	}

}
