package com.recipecomment.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class RecipeCommentJDBCDAO implements RecipeCommentDAOInterface {
	private static String driver = "com.mysql.cj.jdbc.Driver";
	private static String url = "jdbc:mysql://localhost:3306/JustEat?serverTimezone=Asia/Taipei"
			+ "&rewriteBatchedStatements=true";
	private static String userid = "DBAdmin";
	private static String passwd = "justeat";

	static {
		try {
			Class.forName(driver);
		} catch (ClassNotFoundException ce) {
			ce.printStackTrace();
		}
	}

	private static final String INSERT = "INSERT INTO RecipeComment(recipe_id, account_id, recipe_comment_text, recipe_comment_time) VALUES(?, ?, ?, NOW())";
	private static final String UPDATE = "UPDATE RecipeComment SET recipe_comment_text = ? WHERE recipe_comment_id = ?";
	private static final String DELETE = "DELETE FROM RecipeComment WHERE recipe_comment_id = ?";
	// 順序為時間降冪
	private static final String SELECT_ONE = "SELECT * FROM RecipeComment WHERE recipe_comment_id = ?";
	private static final String SELECT_ALL_BY_RECIPE = "SELECT * FROM RecipeComment WHERE recipe_id = ? ORDER BY recipe_comment_time DESC";
	private static final String SELECT_ALL_BY_ACCOUNT = "SELECT * FROM RecipeComment WHERE account_id = ? ORDER BY recipe_comment_time DESC";

	@Override
	public RecipeCommentVO getOnebyID(int recipeCommentID) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		RecipeCommentVO recipeComment = null;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(SELECT_ONE);

			pstmt.setInt(1, recipeCommentID);

			rs = pstmt.executeQuery();
			if (rs.next()) {
				recipeComment = new RecipeCommentVO();
				recipeComment.setRecipeCommentID(rs.getInt("recipe_comment_id"));
				recipeComment.setRecipeID(rs.getInt("recipe_id"));
				recipeComment.setAccountID(rs.getInt("account_id"));
				recipeComment.setRecipeCommentText(rs.getString("recipe_comment_text"));
				recipeComment.setRecipeCommentTime(rs.getTimestamp("recipe_comment_time"));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return recipeComment;
	}

	@Override
	public int insert(RecipeCommentVO recipeComment) {

		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		int autoGeneratedKey = 0;
		String[] autoGeneratedCol = { "recipe_comment_id" };

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(INSERT, autoGeneratedCol);
			pstmt.setInt(1, recipeComment.getRecipeID());
			pstmt.setInt(2, recipeComment.getAccountID());
			pstmt.setString(3, recipeComment.getRecipeCommentText());

			pstmt.executeUpdate();

			rs = pstmt.getGeneratedKeys();
			if (rs.next()) {
				autoGeneratedKey = rs.getInt(1); // PK
			}

		} catch (SQLException e) {
			e.printStackTrace();

		} finally {

			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}

		return autoGeneratedKey;
	}

	@Override
	public int update(RecipeCommentVO recipeComment) {
		Connection con = null;
		PreparedStatement pstmt = null;
		int updateRow = 0;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(UPDATE);
			pstmt.setString(1, recipeComment.getRecipeCommentText());
			pstmt.setInt(2, recipeComment.getRecipeCommentID());

			updateRow = pstmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();

		} finally {

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return updateRow;
	}

	@Override
	public int delete(int recipeCommentID) {

		Connection con = null;
		PreparedStatement pstmt = null;
		int deleteRow = 0;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(DELETE);

			pstmt.setInt(1, recipeCommentID);

			deleteRow = pstmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();

		} finally {

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return deleteRow;
	}

	@Override
	public List<RecipeCommentVO> getAllByRecipe(int recipeID) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<RecipeCommentVO> allRecipeCommentVO = new ArrayList<RecipeCommentVO>();
		RecipeCommentVO recipeCommentVO = null;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(SELECT_ALL_BY_RECIPE);
						
			pstmt.setInt(1, recipeID);
			rs = pstmt.executeQuery();
			
			while (rs.next()) {
				recipeCommentVO = new RecipeCommentVO();
				recipeCommentVO.setRecipeCommentID(rs.getInt("recipe_comment_id"));
				recipeCommentVO.setRecipeID(rs.getInt("recipe_id"));
				recipeCommentVO.setAccountID(rs.getInt("account_id"));
				recipeCommentVO.setRecipeCommentText(rs.getString("recipe_comment_text"));
				recipeCommentVO.setRecipeCommentTime(rs.getTimestamp("recipe_comment_time"));
				allRecipeCommentVO.add(recipeCommentVO);
			}
						
		} catch (SQLException e) {
			e.printStackTrace();

		} finally {

			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return allRecipeCommentVO;
	}

	@Override
	public List<RecipeCommentVO> getAllByAccount(int accountID) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<RecipeCommentVO> allRecipeCommentVO = new ArrayList<RecipeCommentVO>();
		RecipeCommentVO recipeCommentVO = null;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(SELECT_ALL_BY_ACCOUNT);
						
			pstmt.setInt(1, accountID);
			rs = pstmt.executeQuery();
			
			while (rs.next()) {
				recipeCommentVO = new RecipeCommentVO();
				recipeCommentVO.setRecipeCommentID(rs.getInt("recipe_comment_id"));
				recipeCommentVO.setRecipeID(rs.getInt("recipe_id"));
				recipeCommentVO.setAccountID(rs.getInt("account_id"));
				recipeCommentVO.setRecipeCommentText(rs.getString("recipe_comment_text"));
				recipeCommentVO.setRecipeCommentTime(rs.getTimestamp("recipe_comment_time"));
				allRecipeCommentVO.add(recipeCommentVO);
			}
						
		} catch (SQLException e) {
			e.printStackTrace();

		} finally {

			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return allRecipeCommentVO;
	}

	// 測試用
	public static void main(String args[]) {
		RecipeCommentVO vo = new RecipeCommentVO();
		RecipeCommentJDBCDAO dao = new RecipeCommentJDBCDAO();
		List<RecipeCommentVO> list;
		
//		// 測試insert 成功
//		vo.setRecipeID(200002);
//		vo.setAccountID(100002);
//		vo.setRecipeCommentText("測試繼續");
//		int voPK = dao.insert(vo);
//		if (voPK > 0) {
//			System.out.println(voPK + "號回覆新增成功!");
//		}

//		// 測試 get one
//		vo = dao.getOnebyID(240002);
//		if (vo != null) {
//			System.out.println(vo.getRecipeCommentID() + "號回覆：\n" + vo.getRecipeCommentText());
//		}
		
//		vo.setRecipeCommentID(240002);
//		vo.setRecipeCommentText("歡迎再回來分享嘗試的結果!");
//		int updateSuccess = dao.update(vo);
//		if (updateSuccess > 0) {
//			System.out.println("修改成功!");
//		}

//		// 測試 delete one
//		int delSuccess = dao.delete(240003);
//		if (delSuccess > 0) {
//			System.out.println("刪除成功");
//		}
		
		// 測試 get all by recipe / account
//		list = dao.getAllByAccount(100002);
		list = dao.getAllByRecipe(200001);
		for (RecipeCommentVO item : list) {
			System.out.println("編號： " + item.getRecipeCommentID());
			System.out.println("時間： " + item.getRecipeCommentTime());
		}

	}
}
