package com.dashboardnotice.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

public class DashboardNoticeJDBCDAO implements DashboardNoticeDAOInterface {
	private static String driver = "com.mysql.cj.jdbc.Driver";
	private static String url = "jdbc:mysql://localhost:3306/JustEat?serverTimezone=Asia/Taipei"
			+ "&rewriteBatchedStatements=true";
	private static String userid = "DBAdmin";
	private static String passwd = "justeat";

	private static final String INSERT = "INSERT INTO DashboardNotice(dashboardNotice_type, dashboardNotice_text, dashboardNotice_time) VALUES(?, ?, NOW())";
	private static final String UPDATE_STATE = "UPDATE DashboardNotice SET dashboardNotice_state = ? WHERE dashboardNotice_id = ?";
	private static final String DELETE = "DELETE FROM DashboardNotice WHERE dashboardNotice_id = ?";
	private static final String SELECT_ALL = "SELECT * FROM DashboardNotice ORDER BY dashboardNotice_id DESC";
	private static final String SELECT_ONE = "SELECT * FROM DashboardNotice WHERE dashboardNotice_id = ?";
	static {
		try {
			Class.forName(driver);
		} catch (ClassNotFoundException ce) {
			ce.printStackTrace();
		}
	}

	@Override
	public int insert(DashboardNoticeVO dashboardNotice) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		String[] autoGeneratedCols = { "dashboardNotice_id" };
		int autoGeneratedKey = 0;
		
		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(INSERT, autoGeneratedCols);
			
			pstmt.setInt(1, dashboardNotice.getDashboardNoticeType());
			pstmt.setString(2, dashboardNotice.getDashboardNoticeText());

			pstmt.executeUpdate();
			
			rs = pstmt.getGeneratedKeys();
			if (rs.next()) {
				autoGeneratedKey = rs.getInt(1);
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		
		
		return autoGeneratedKey;
	}

	@Override
	public int updateState(DashboardNoticeVO dashboardNotice) {
		Connection con = null;
		PreparedStatement pstmt = null;
		int updateRow = 0;
		
		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(UPDATE_STATE);
			
			pstmt.setInt(1, dashboardNotice.getDashboardNoticeState());
			pstmt.setInt(2, dashboardNotice.getDashboardNoticeID());
			
			updateRow = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		
		return updateRow;
	}
	

	@Override
	public int delete(int dashboardNoticeID) {
		Connection con = null;
		PreparedStatement pstmt = null;
		int deleteRow = 0;
		
		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(DELETE);
			
			pstmt.setInt(1, dashboardNoticeID);
			
			deleteRow = pstmt.executeUpdate();	
			
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return deleteRow;
	}

	@Override
	public DashboardNoticeVO getOneByID(int dashboardNoticeID) {
		return null;
	}
	
	@Override
	public List<DashboardNoticeVO> getAll() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<DashboardNoticeVO> getAllByType(int dashboardNoticeType) {
		// TODO Auto-generated method stub
		return null;
	}




}
