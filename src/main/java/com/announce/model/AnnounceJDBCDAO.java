package com.announce.model;

import java.util.*;

import com.accountinfo.model.AccountInfoJDBCDAO;

import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class AnnounceJDBCDAO implements AnnounceDAOInterface{

	private static String driver = "com.mysql.cj.jdbc.Driver";
	private static String url = "jdbc:mysql://localhost:3306/JustEat?serverTimezone=Asia/Taipei";
	private static String userid = "DBAdmin";
	private static String password = "justeat";
	
	private static final String Insert_Stmt = "Insert into Announce "
			+ "(announce_text,announce_time, announce_state) "
			+ "Values(?,?,0)";

	private static final String Update_Stmt = "Update Announce set "
			+ "announce_text=?,announce_time=?"
			+ "Where announce_id=?";
	private static final String Delete_Stmt = 
			"Delete From Announce Where announce_id=?";
	private static final String Select_Key_Stmt = 
			"Select * From JustEat.Announce Where announce_id=?";
	private static final String Select_All_Stmt = 
			"Select * From JustEat.Announce";
	
	private static final String Select_Announce = 
			"Select * From JustEat.Announce";
	
	static {
		try {
			Class.forName(driver);
		} catch (ClassNotFoundException e) {
			e.printStackTrace(System.err);
		}
	}
	
	@Override
	public int insert(AnnounceVO announceVO) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs =null;
		
		String[] autoGeneratedCol = {"announce_id"};
		Integer autoGeneratedkey = null;
		
		try {
			con = DriverManager.getConnection(url,userid,password);
			pstmt = con.prepareStatement(Insert_Stmt,autoGeneratedCol);
			
			pstmt.setString(1,announceVO.getAnnounceText());
			pstmt.setTimestamp(2,announceVO.getAnnounceTime());
//			pstmt.setInt(3,0);
			
			pstmt.executeUpdate();
			
			rs = pstmt.getGeneratedKeys();
			if(rs.next()) {
				autoGeneratedkey = rs.getInt(1);
				System.out.println("Announce insert completed!Announce_id="+autoGeneratedkey);
			}else {
				System.out.println("Announce insert failed!");
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			if (rs != null) {
				try {
					rs.close();
				}catch(Exception e) {
					e.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {					
					pstmt.close();
				}catch (Exception e){
					e.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				}catch(Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return autoGeneratedkey;
	}

	@Override
	public void update(AnnounceVO announceVO) {
		Connection con = null;
		PreparedStatement pstmt = null;
		
		try {
			con = DriverManager.getConnection(url,userid,password);
			pstmt = con.prepareStatement(Update_Stmt);
			
			pstmt.setString(1,announceVO.getAnnounceText());
			pstmt.setTimestamp(2,announceVO.getAnnounceTime());
			pstmt.setInt(3,announceVO.getAnnounceID());
			
			pstmt.executeUpdate();
			
		}catch (Exception e){
			e.printStackTrace(System.err);
		}finally {
			if (pstmt != null) {
				try {
					pstmt.close();
				}catch(Exception e) {
					e.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				}catch(Exception e) {
					e.printStackTrace(System.err);;
				}
			}
		}
	}

	@Override
	public void delete(Integer announce_id) {
		Connection con = null;
		PreparedStatement pstmt = null;
		
		try {
			con = DriverManager.getConnection(url, userid, password);
			pstmt = con.prepareStatement(Delete_Stmt);
			pstmt.setInt(1, announce_id);
			pstmt.executeUpdate();

			System.out.println("Announce delete completed!");
		}catch(Exception e){
			e.printStackTrace();
		}finally {
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
	}

	@Override
	public AnnounceVO findByPrimaryKey(Integer announce_id) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		AnnounceVO announceVO = null;
		
		try {
			con = DriverManager.getConnection(url, userid, password);
			pstmt = con.prepareStatement(Select_Key_Stmt);
			
			pstmt.setInt(1, announce_id);
			rs = pstmt.executeQuery();

			while (rs.next()) {
				announceVO = new AnnounceVO();
				announceVO.setAnnounceID(rs.getInt("announce_id"));
				announceVO.setAnnounceText(rs.getString("announce_text"));
				announceVO.setAnnounceTime(rs.getTimestamp("announce_time"));
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if(rs != null) {
				try {
					rs.close();					
				}catch(Exception e) {
					e.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return announceVO;
	}

	@Override
	public List<AnnounceVO> getAll() {
		List<AnnounceVO> list = new ArrayList<AnnounceVO>();
		AnnounceVO announceVO = null;
		
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			Class.forName(driver);
			con = DriverManager.getConnection(url, userid, password);
			pstmt = con.prepareStatement(Select_All_Stmt);
			rs = pstmt.executeQuery();
			
			while (rs.next()) {
				announceVO = new AnnounceVO();
				announceVO.setAnnounceID(rs.getInt("announce_id"));
				announceVO.setAnnounceText(rs.getString("announce_text"));
				announceVO.setAnnounceTime(rs.getTimestamp("announce_time"));
				list.add(announceVO);
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return list;
	}
	
	@Override
	public List<AnnounceVO> getAnnounce() {
		List<AnnounceVO> list = new ArrayList<AnnounceVO>();
		AnnounceVO announceVO = null;
		
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			Class.forName(driver);
			con = DriverManager.getConnection(url, userid, password);
			pstmt = con.prepareStatement(Select_Announce);
			rs = pstmt.executeQuery();
			
			while (rs.next()) {
				announceVO = new AnnounceVO();

				announceVO.setAnnounceText(rs.getString("announce_text"));
				announceVO.setAnnounceTime(rs.getTimestamp("announce_time"));
				list.add(announceVO);
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally {
			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return list;
	}
	
	
	
	
	public static void main(String[] args) {
		String date = "2021-02-03 14:00";
		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
		LocalDateTime localDateTime = LocalDateTime.parse(date,formatter);
		Timestamp timestampdate = Timestamp.valueOf(localDateTime);
		
		AnnounceJDBCDAO announceJDBCDAO = new AnnounceJDBCDAO();
		
		AnnounceVO announceVO = new AnnounceVO();
		
		//新增 OK
//		announceVO.setAnnounceText("這是公告這是公告這是公告");
//		announceVO.setAnnounceTime(timestampdate);
//		announceJDBCDAO.insert(announceVO);
		//刪除 OK
//		announceJDBCDAO.delete(700001);

		//修改 OK
//		announceVO.setAnnounceText("這不是公告這不是公告");
//		announceVO.setAnnounceTime(timestampdate);
//		announceVO.setAnnounceID(700001);
//		announceJDBCDAO.update(announceVO);
		//查詢 OK
//		announceVO = announceJDBCDAO.findByPrimaryKey(700001);
//		System.out.println(announceVO.getAnnounceText()+",");
//		System.out.println(announceVO.getAnnounceTime()+",");
//		System.out.println("search complete!");
		//查詢全部 OK
//		List<AnnounceVO> announceVO_list = announceJDBCDAO.getAll();
//		for (AnnounceVO e:announceVO_list) {
//			System.out.println(e.getAnnounceText()+",");
//			System.out.println(e.getAnnounceTime()+",");
//		}

		
	}
}
