package com.ingredienttag.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class IngredientTagJDBCDAO implements IngredientTagDAOInterface {
	private static String driver = "com.mysql.cj.jdbc.Driver";
	private static String url = "jdbc:mysql://localhost:3306/JustEat?serverTimezone=Asia/Taipei"
			+ "&rewriteBatchedStatements=true";
	private static String userid = "DBAdmin";
	private static String passwd = "justeat";

	static {
		try {
			Class.forName(driver);
		} catch (ClassNotFoundException ce) {
			ce.printStackTrace();
		}
	}

	private static final String INSERT = "INSERT INTO IngredientTag(ingredienttag_name) VALUES(?)";
	private static final String SELECT_ONE_BY_ID = "SELECT * FROM IngredientTag WHERE ingredienttag_id = ?";
	private static final String SELECT_ONE_BY_NAME = "SELECT * FROM IngredientTag WHERE ingredienttag_name = ?";
	private static final String SELECT_ALL = "SELECT * FROM IngredientTag ORDER BY ingredienttag_id DESC";
	private static final String UPDATE = "UPDATE IngredientTag SET ingredienttag_name = ? WHERE ingredienttag_id = ?";
	private static final String DELETE = "DELETE FROM IngredientTag WHERE ingredienttag_id = ?";

	@Override
	public int insert(IngredientTagVO ingredientTag) {
		Connection con = null;
		PreparedStatement pstmt = null;
		String[] autoGeneratedCol = { "ingredienttag_id" };
		ResultSet rs = null;
		int autoGeneratedKey = 0;

		try {
			con = DriverManager.getConnection(url, userid, passwd);

			pstmt = con.prepareStatement(INSERT, autoGeneratedCol);
			pstmt.setString(1, ingredientTag.getIngredientTagName());
			pstmt.executeUpdate();

			rs = pstmt.getGeneratedKeys();
			if (rs.next()) {
				autoGeneratedKey = rs.getInt(1);
			}

		} catch (SQLException se) {
			se.printStackTrace();
		} finally {

			if (rs != null) {
				try {
					rs.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}

		}
		return autoGeneratedKey;
	}

	@Override
	public int update(IngredientTagVO ingredientTag) {
		Connection con = null;
		PreparedStatement pstmt = null;
		int updateRow = 0;

		try {
			con = DriverManager.getConnection(url, userid, passwd);

			pstmt = con.prepareStatement(UPDATE);

			pstmt.setString(1, ingredientTag.getIngredientTagName());
			pstmt.setInt(2, ingredientTag.getIngredientTagID());
			updateRow = pstmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}

		}
		return updateRow;
	}

	@Override
	public int delete(int ingredientTagID) {
		Connection con = null;
		PreparedStatement pstmt = null;
		int deleteRow = 0;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(DELETE);

			pstmt.setInt(1, ingredientTagID);
			deleteRow = pstmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}

		}
		return deleteRow;
	}

	@Override
	public int delete(int[] ingredientTagIDs) {
		Connection con = null;
		PreparedStatement pstmt = null;
		int deleteRows = 0;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(DELETE);

			for (int ingredientTagID : ingredientTagIDs) {
				pstmt.setInt(1, ingredientTagID);
				pstmt.addBatch();
				deleteRows++;
			}

			pstmt.executeBatch();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}

		}
		return deleteRows;
	}

	@Override
	public List<IngredientTagVO> getAll() {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		List<IngredientTagVO> allIngredientTag = new ArrayList<IngredientTagVO>();

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(SELECT_ALL);

			rs = pstmt.executeQuery();
			while (rs.next()) {
				IngredientTagVO ingredientTag = new IngredientTagVO();
				ingredientTag.setIngredientTagID(rs.getInt("ingredienttag_id"));
				ingredientTag.setIngredientTagName(rs.getString("ingredienttag_name"));
				allIngredientTag.add(ingredientTag);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (rs != null)
				try {
					rs.close();
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}

		return allIngredientTag;
	}

	@Override
	public IngredientTagVO getOneByID(int ingredientTagID) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		IngredientTagVO ingredientTag = null;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(SELECT_ONE_BY_ID);

			pstmt.setInt(1, ingredientTagID);
			rs = pstmt.executeQuery();

			if (rs.next()) {
				ingredientTag = new IngredientTagVO();
				ingredientTag.setIngredientTagID(rs.getInt("ingredientTag_id"));
				ingredientTag.setIngredientTagName(rs.getString("ingredientTag_name"));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (rs != null)
				try {
					rs.close();
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return ingredientTag;
	}

	@Override
	public boolean isExist(String ingredientTagName) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		boolean ExistStatus = false;

		try {
			con = DriverManager.getConnection(url, userid, passwd);
			pstmt = con.prepareStatement(SELECT_ONE_BY_NAME);

			pstmt.setString(1, ingredientTagName);
			rs = pstmt.executeQuery();

			if (rs.next()) {
//				ingredientTag.setIngredientTagID(rs.getInt("ingredienttag_id"));
				ExistStatus = true;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {

			if (rs != null)
				try {
					rs.close();
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}

			if (pstmt != null) {
				try {
					pstmt.close();
				} catch (SQLException se) {
					se.printStackTrace(System.err);
				}
			}
			if (con != null) {
				try {
					con.close();
				} catch (Exception e) {
					e.printStackTrace(System.err);
				}
			}
		}
		return ExistStatus;
	}

	public static void main(String args[]) {
		IngredientTagVO vo = new IngredientTagVO();
		IngredientTagJDBCDAO dao = new IngredientTagJDBCDAO();
		List<IngredientTagVO> list;

//		// 測試 insert
//		String name = "深海魚類";
//		vo.setIngredientTagName(name);
//		if (dao.isExist(name)) {
//			System.out.println("此分類名稱已存在");
//		} else {
//			int key = dao.insert(vo);
//			if (key != 0) {
//				System.out.println("流水號" + key + "新增成功");
//			}
//		}

		// 測試 update
		vo = dao.getOneByID(210008);
		String newName = "鹹水魚類";
		if (vo != null) {
			System.out.println("該編號存在，繼續執行更新檢測");
			if (!newName.equals(vo.getIngredientTagName())) {
				if (dao.isExist(newName)) {
					System.out.println("已有其他同名分類!");
				} else {
					vo.setIngredientTagName(newName);
					System.out.println(dao.update(vo) + "筆資料更新成功");
				}
			} else {
				System.out.println("你沒有改名");
			}
		} else {
			System.out.println("(流水號錯誤)不做任何事，搭配修改按鈕onclick，不可能發生這種情況");
		}

//		// 測試 get all 成功
//		list = dao.getAll();
//		for (IngredientTagVO one : list) {
//			System.out.println("編號：" + one.getIngredientTagID());
//			System.out.println("名稱：" + one.getIngredientTagName());
//			System.out.println("=============");
//		}

//		// 測試 delete one 成功
//		if (dao.delete(210005) > 0) {
//			System.out.println("刪除成功");
//		}

//		// 測試delete many 成功
//		int[] delNum = { 210004, 210003 }; 
//		int delRows = dao.delete(delNum);
//		if (delRows > 0) {
//			System.out.println("刪除成功");
//		}

	}

}
